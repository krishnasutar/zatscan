import * as XLSX from 'xlsx';
import * as ExcelJS from 'exceljs';
import { ScannedQR } from '@shared/schema';
import zatScanLogo from '@assets/zatscan-color_1750578368450.png';

// Function to get image as buffer for ExcelJS
async function getImageAsBuffer(imagePath: string): Promise<ArrayBuffer | null> {
  try {
    const response = await fetch(imagePath);
    const arrayBuffer = await response.arrayBuffer();
    return arrayBuffer;
  } catch (error) {
    console.warn('Could not load logo image:', error);
    return null;
  }
}

export interface ExportOptions {
  filename: string;
  includeHeaders: boolean;
  exportRange: 'all' | 'selected' | 'valid';
  selectedIds?: number[];
}

export async function exportToExcel(
  qrCodes: ScannedQR[], 
  options: ExportOptions
): Promise<void> {
  let dataToExport = qrCodes;
  
  // Filter data based on export range
  switch (options.exportRange) {
    case 'selected':
      if (options.selectedIds) {
        dataToExport = qrCodes.filter(qr => options.selectedIds!.includes(qr.id));
      }
      break;
    case 'valid':
      dataToExport = qrCodes.filter(qr => qr.status === 'valid');
      break;
    default:
      // 'all' - use all data
      break;
  }
  
  // Create workbook using ExcelJS for better image support
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('ZatScan Report');
  
  // Get logo as buffer for embedding
  const logoBuffer = await getImageAsBuffer(zatScanLogo);
  
  // Set row heights for logo space
  worksheet.getRow(1).height = 25;
  worksheet.getRow(2).height = 25;
  worksheet.getRow(3).height = 25;
  
  // Add logo if available in dedicated logo area
  if (logoBuffer) {
    const logoId = workbook.addImage({
      buffer: logoBuffer,
      extension: 'png',
    });
    
    // Add logo to worksheet in dedicated space (A1:C3)
    worksheet.addImage(logoId, {
      tl: { col: 0, row: 0 },
      br: { col: 2, row: 2 },
      ext: { width: 180, height: 45 }
    });
  }
  
  // Add header with ZatScan branding starting from column D
  worksheet.getCell('D1').value = 'ZatScan - ZATCA QR Code Scanner';
  worksheet.getCell('D1').font = { bold: true, size: 16, color: { argb: 'FFFFFFFF' } };
  worksheet.getCell('D1').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } };
  worksheet.getCell('D1').alignment = { horizontal: 'center', vertical: 'middle' };
  worksheet.mergeCells('D1:J1');
  
  worksheet.getCell('D2').value = 'Saudi Arabia Invoice QR Code Analysis Report';
  worksheet.getCell('D2').font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
  worksheet.getCell('D2').fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF70AD47' } };
  worksheet.getCell('D2').alignment = { horizontal: 'center', vertical: 'middle' };
  worksheet.mergeCells('D2:J2');
  
  worksheet.getCell('D3').value = 'Professional ZATCA QR Code Analysis System';
  worksheet.getCell('D3').font = { bold: true, size: 10, color: { argb: 'FF666666' } };
  worksheet.getCell('D3').alignment = { horizontal: 'center', vertical: 'middle' };
  worksheet.mergeCells('D3:J3');
  
  // Add company info with proper spacing
  worksheet.getCell('A5').value = 'Generated by ZatScanâ„¢';
  worksheet.getCell('A5').font = { bold: true };
  worksheet.getCell('H5').value = 'Export Date:';
  worksheet.getCell('I5').value = new Date().toLocaleDateString();
  
  worksheet.getCell('A6').value = 'Website: www.growthsphereindustries.com';
  worksheet.getCell('H6').value = 'Export Time:';
  worksheet.getCell('I6').value = new Date().toLocaleTimeString();
  
  worksheet.getCell('A7').value = 'Professional Invoice Analysis & Compliance';
  worksheet.getCell('H7').value = 'Version: 1.0';
  
  // Add report summary
  worksheet.getCell('A9').value = 'Report Summary:';
  worksheet.getCell('A9').font = { bold: true };
  
  const validQRs = dataToExport.filter(qr => qr.status === 'valid');
  worksheet.getCell('A10').value = 'Total Records:';
  worksheet.getCell('B10').value = dataToExport.length;
  worksheet.getCell('D10').value = 'Valid Records:';
  worksheet.getCell('E10').value = validQRs.length;
  worksheet.getCell('G10').value = 'Invalid Records:';
  worksheet.getCell('H10').value = dataToExport.length - validQRs.length;
  
  // Add data headers
  const headerRow = 12;
  const headers = ['Row', 'Status', 'Seller Name', 'VAT Number', 'Invoice Number', 'Invoice Date', 'Subtotal (SAR)', 'VAT Amount (SAR)', 'Total Amount (SAR)', 'Scanned At'];
  
  if (options.includeHeaders) {
    headers.forEach((header, index) => {
      const cell = worksheet.getCell(headerRow, index + 1);
      cell.value = header;
      cell.font = { bold: true };
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE7E6E6' } };
    });
  }
  
  // Add data rows
  dataToExport.forEach((qr, index) => {
    const rowIndex = headerRow + (options.includeHeaders ? 1 : 0) + index + 1;
    
    worksheet.getCell(rowIndex, 1).value = index + 1;
    worksheet.getCell(rowIndex, 2).value = qr.status === 'valid' ? 'Valid' : 'Invalid';
    worksheet.getCell(rowIndex, 3).value = qr.sellerName || '-';
    worksheet.getCell(rowIndex, 4).value = qr.vatNumber || '-';
    worksheet.getCell(rowIndex, 5).value = qr.invoiceNumber || '-';
    worksheet.getCell(rowIndex, 6).value = qr.invoiceDate || '-';
    worksheet.getCell(rowIndex, 7).value = qr.subtotal ? parseFloat(qr.subtotal).toFixed(2) : '-';
    worksheet.getCell(rowIndex, 8).value = qr.vatAmount ? parseFloat(qr.vatAmount).toFixed(2) : '-';
    worksheet.getCell(rowIndex, 9).value = qr.totalAmount ? parseFloat(qr.totalAmount).toFixed(2) : '-';
    worksheet.getCell(rowIndex, 10).value = qr.scannedAt.toLocaleString();
  });
  
  // Add financial summary
  if (dataToExport.length > 0) {
    const summaryRow = headerRow + (options.includeHeaders ? 1 : 0) + dataToExport.length + 3;
    
    const totalAmount = validQRs.reduce((sum, qr) => 
      sum + (qr.totalAmount ? parseFloat(qr.totalAmount) : 0), 0
    );
    const totalVAT = validQRs.reduce((sum, qr) => 
      sum + (qr.vatAmount ? parseFloat(qr.vatAmount) : 0), 0
    );
    const totalSubtotal = totalAmount - totalVAT;
    
    worksheet.getCell(summaryRow, 1).value = 'FINANCIAL SUMMARY';
    worksheet.getCell(summaryRow, 1).font = { bold: true, size: 12 };
    
    worksheet.getCell(summaryRow + 1, 1).value = 'Valid Invoices:';
    worksheet.getCell(summaryRow + 1, 2).value = validQRs.length;
    worksheet.getCell(summaryRow + 1, 4).value = 'Total Subtotal:';
    worksheet.getCell(summaryRow + 1, 5).value = `${totalSubtotal.toFixed(2)} SAR`;
    worksheet.getCell(summaryRow + 1, 7).value = 'Total VAT:';
    worksheet.getCell(summaryRow + 1, 8).value = `${totalVAT.toFixed(2)} SAR`;
    worksheet.getCell(summaryRow + 1, 9).value = 'Grand Total:';
    worksheet.getCell(summaryRow + 1, 10).value = `${totalAmount.toFixed(2)} SAR`;
    
    worksheet.getCell(summaryRow + 3, 1).value = 'Report generated by ZatScan';
    worksheet.getCell(summaryRow + 3, 8).value = 'Page 1 of 1';
    worksheet.getCell(summaryRow + 4, 1).value = 'For support, visit: www.growthsphereindustries.com';
  }
  
  // Set column widths
  worksheet.columns = [
    { width: 8 },   // Row
    { width: 12 },  // Status
    { width: 30 },  // Seller Name
    { width: 20 },  // VAT Number
    { width: 20 },  // Invoice Number
    { width: 15 },  // Invoice Date
    { width: 18 },  // Subtotal
    { width: 18 },  // VAT Amount
    { width: 18 },  // Total Amount
    { width: 22 },  // Scanned At
  ];
  
  // Generate filename with ZatScan prefix
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = options.filename || `ZatScan_ZATCA_Report_${timestamp}`;
  const finalFilename = filename.endsWith('.xlsx') ? filename : `${filename}.xlsx`;
  
  // Save file
  const buffer = await workbook.xlsx.writeBuffer();
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  
  // Create download link
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = finalFilename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
}
